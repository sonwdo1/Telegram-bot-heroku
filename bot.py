import os
import logging
import subprocess
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN")  # L·∫•y token t·ª´ Railway Variables

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ================== H√ÄM G·ªåI TOOL G·ªêC ==================
def run_tool(username: str, password: str):
    """
    G·ªçi tool g·ªëc lbdxaov.py b·∫±ng subprocess
    """
    try:
        process = subprocess.Popen(
            ["python3", "lbdxaov.py"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # Tool th∆∞·ªùng y√™u c·∫ßu nh·∫≠p user & pass
        out, err = process.communicate(f"{username}\n{password}\n", timeout=120)

        # Ki·ªÉm tra log
        logger.info("Tool output: %s", out)
        if err:
            logger.error("Tool error: %s", err)

        return True
    except Exception as e:
        logger.error("Tool execution failed: %s", str(e))
        return False

# ================== COMMAND HANDLERS ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/login"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("ü§ñ Bot s·∫µn s√†ng!\nNh·∫•n /login ƒë·ªÉ b·∫Øt ƒë·∫ßu.", reply_markup=reply_markup)

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîë Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u theo d·∫°ng:\n\n`user|pass`", parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if "|" in text:  # user nh·∫≠p t√†i kho·∫£n|m·∫≠t kh·∫©u
        username, password = text.split("|", 1)
        await update.message.reply_text("‚öôÔ∏è ƒêang ch·∫°y tool, vui l√≤ng ch·ªù...")

        success = run_tool(username.strip(), password.strip())
        if success:
            # Tool ch·∫°y xong -> g·ª≠i file k·∫øt qu·∫£
            output_file = "output/result.txt"  # thay t√™n file tool xu·∫•t ra
            if os.path.exists(output_file):
                await update.message.reply_document(document=open(output_file, "rb"))
            else:
                await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y file output.")
        else:
            await update.message.reply_text("‚ùå Tool l·ªói, vui l√≤ng th·ª≠ l·∫°i.")

# ================== MAIN ==================
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
